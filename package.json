{
  "name": "auto-import",
  "displayName": "Auto Import Relative Path",
  "description": "Streamline your imports with instant relative path generation. Copy or auto-import files for JavaScript, TypeScript, CSS, HTML, and Markdown in a single command—no more manual path typing or memorizing!",
  "publisher": "ElecTreeFrying",
  "version": "0.5.4",
  "author": {
    "name": "John James Ermitaño",
    "email": "jjgermitano@gmail.com"
  },
  "icon": "assets/extension-icon.png",
  "engines": {
    "vscode": "^1.98.0"
  },
  "homepage": "https://github.com/ElecTreeFrying/auto-import-relative-path",
  "repository": {
    "type": "git",
    "url": "https://github.com/ElecTreeFrying/auto-import-relative-path.git"
  },
  "bugs": {
    "email": "octobergroup721@gmail.com",
    "url": "https://github.com/ElecTreeFrying/auto-import-relative-path/issues"
  },
  "pricing": "Free",
  "badges": [
    {
      "url": "https://vsmarketplacebadge.apphb.com/version-short/Electreefrying.auto-import.png",
      "description": "Version badge",
      "href": "https://marketplace.visualstudio.com/items?itemName=ElecTreeFrying.auto-import"
    },
    {
      "url": "https://vsmarketplacebadges.dev/downloads-short/ElecTreeFrying.auto-import.png",
      "description": "Downloads badge",
      "href": "https://marketplace.visualstudio.com/items?itemName=ElecTreeFrying.auto-import"
    },
    {
      "url": "https://vsmarketplacebadges.dev/installs-short/ElecTreeFrying.auto-import.png",
      "description": "Installs badge",
      "href": "https://marketplace.visualstudio.com/items?itemName=ElecTreeFrying.auto-import"
    },
    {
      "url": "https://vsmarketplacebadges.dev/rating-short/ElecTreeFrying.auto-import.png",
      "description": "Rating badge",
      "href": "https://marketplace.visualstudio.com/items?itemName=ElecTreeFrying.auto-import"
    }
  ],
  "extensionPack": [
    "ElecTreeFrying.drag-import-relative-path"
  ],
  "galleryBanner": {
    "color": "#494949",
    "theme": "dark"
  },
  "license": "MIT",
  "categories": [
    "Programming Languages",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "vscode",
    "visual studio code",
    "auto import relative",
    "auto import relative path",
    "relative import",
    "auto import",
    "relative path",
    "import helper",
    "import statement",
    "auto import extension",
    "import automation",
    "code productivity",
    "file import",
    "drag",
    "import",
    "path",
    "relative",
    "angular",
    "react",
    "vue",
    "javascript",
    "typescript",
    "css",
    "scss",
    "html",
    "markdown",
    "code snippet"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "extension.pasteImport",
        "title": "Auto Import: Paste"
      },
      {
        "command": "extension.copyFilePath",
        "title": "Auto Import: Copy"
      },
      {
        "command": "extension.copyPaste",
        "title": "Auto Import: Auto"
      }
    ],
    "keybindings": [
      {
        "command": "extension.pasteImport",
        "key": "ctrl+i",
        "mac": "cmd+i",
        "when": "editorTextFocus"
      },
      {
        "command": "extension.copyFilePath",
        "key": "ctrl+shift+a",
        "mac": "cmd+shift+a",
        "when": "editorTextFocus || filesExplorerFocus"
      },
      {
        "command": "extension.copyPaste",
        "key": "alt+d",
        "mac": "alt+d",
        "when": "filesExplorerFocus"
      }
    ],
    "configuration": [
      {
        "title": "Auto Import Relative Path",
        "properties": {
          "auto-import.preferences.importStatementPlacement": {
            "title": "Import statement placement",
            "description": "Choose where new import statements are placed in your code: 'Top' inserts at the start of your imports, 'Bottom' appends at the end, and 'Cursor' places it at the current cursor location.",
            "type": "string",
            "default": "Bottom",
            "enum": [
              "Top",
              "Bottom",
              "Cursor"
            ],
            "enumDescriptions": [
              "Insert at the start of the existing import list.",
              "Append at the end of the existing import list.",
              "Insert at the current cursor location."
            ]
          },
          "auto-import.importStatement.script.preserveScriptFileExtension": {
            "title": "Preserve script file extension",
            "description": "When enabled, retains the .js or .ts file extension in import paths.",
            "type": "boolean",
            "default": false
          },
          "auto-import.importStatement.script.javascriptImportStyle": {
            "title": "JavaScript (JS/JSX) import style",
            "description": "Select a default import style for JavaScript or JSX files. Use '_relativePath_' to represent the path and 'name' for the import variable.",
            "type": "string",
            "default": "import name from '_relativePath_';",
            "enum": [
              "import name from '_relativePath_';",
              "import { name } from '_relativePath_';",
              "import { default as name } from '_relativePath_';",
              "import * as name from '_relativePath_';",
              "import '_relativePath_';",
              "var name = require('_relativePath_');",
              "const name = require('_relativePath_');",
              "var name = import('_relativePath_');",
              "const name = import('_relativePath_');"
            ]
          },
          "auto-import.importStatement.script.typescriptImportStyle": {
            "title": "TypeScript (TS/TSX) import style",
            "description": "Select a default import style for TypeScript or TSX files. Use '_relativePath_' to represent the path and 'name' for the import variable.",
            "type": "string",
            "default": "import { name } from '_relativePath_';",
            "enum": [
              "import name from '_relativePath_';",
              "import { name } from '_relativePath_';",
              "import { default as name } from '_relativePath_';",
              "import * as name from '_relativePath_';",
              "import '_relativePath_';"
            ]
          },
          "auto-import.importStatement.styleSheet.preserveStylesheetFileExtension": {
            "title": "Preserve stylesheet file extension",
            "description": "When enabled, retains the .css or .scss file extension in import paths.",
            "type": "boolean",
            "default": false
          },
          "auto-import.importStatement.styleSheet.cssImportStyle": {
            "title": "CSS import style",
            "description": "Choose how CSS files are imported (e.g., '@import' or '@import url').",
            "type": "string",
            "default": "@import '_relativePath_';",
            "enum": [
              "@import '_relativePath_';",
              "@import url('_relativePath_');"
            ]
          },
          "auto-import.importStatement.styleSheet.cssImageImportStyle": {
            "title": "CSS image import style",
            "description": "Choose how images are referenced in CSS (e.g., 'url(...)').",
            "type": "string",
            "default": "url('_relativePath_')",
            "enum": [
              "url('_relativePath_')"
            ]
          },
          "auto-import.importStatement.styleSheet.scssImportStyle": {
            "title": "SCSS import style",
            "description": "Choose how SCSS files are imported (e.g., '@import', '@use').",
            "type": "string",
            "default": "@import '_relativePath_';",
            "enum": [
              "@import '_relativePath_';",
              "@import url('_relativePath_');",
              "@use '_relativePath_';",
              "@use '_relativePath_' as *;"
            ]
          },
          "auto-import.importStatement.styleSheet.scssImageImportStyle": {
            "title": "SCSS image import style",
            "description": "Choose how images are referenced in SCSS (e.g., 'url(...)').",
            "type": "string",
            "default": "url('_relativePath_')",
            "enum": [
              "url('_relativePath_')"
            ]
          },
          "auto-import.importStatement.markup.htmlScriptImportStyle": {
            "title": "HTML script import style",
            "description": "Defines how JavaScript files are referenced in HTML. Use '_relativePath_' as the placeholder for the file path.",
            "type": "string",
            "default": "<script type=\"text/javascript\" src=\"_relativePath_\"></script>",
            "enum": [
              "<script type=\"text/javascript\" src=\"_relativePath_\"></script>"
            ]
          },
          "auto-import.importStatement.markup.htmlImageImportStyle": {
            "title": "HTML image import style",
            "description": "Defines how images are referenced in HTML. Use '_relativePath_' as the placeholder for the file path.",
            "type": "string",
            "default": "<img src=\"_relativePath_\" alt=\"sample\">",
            "enum": [
              "<img src=\"_relativePath_\" alt=\"sample\">"
            ]
          },
          "auto-import.importStatement.markup.htmlStyleSheetImportStyle": {
            "title": "HTML stylesheet import style",
            "description": "Defines how stylesheets are referenced in HTML. Use '_relativePath_' as the placeholder for the file path.",
            "type": "string",
            "default": "<link href=\"_relativePath_\" rel=\"stylesheet\">",
            "enum": [
              "<link href=\"_relativePath_\" rel=\"stylesheet\">"
            ]
          },
          "auto-import.importStatement.markup.markdownImportStyle": {
            "title": "Markdown import style",
            "description": "Defines how Markdown files are referenced in other Markdown files. Use '_relativePath_' as the placeholder for the file path.",
            "type": "string",
            "default": "![text](_relativePath_)",
            "enum": [
              "![text](_relativePath_)"
            ]
          },
          "auto-import.importStatement.markup.markdownImageImportStyle": {
            "title": "Markdown image import style",
            "description": "Defines how images are referenced in Markdown (inline or reference-style). Use '_relativePath_' as the placeholder for the file path.",
            "type": "string",
            "default": "![alt-text](_relativePath_ \"Hover text\")",
            "enum": [
              "![alt-text](_relativePath_ \"Hover text\")",
              "![alt-text][image] / [image]: _relativePath_ \"Hover text\""
            ]
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.98.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.25.0",
    "@typescript-eslint/parser": "^8.25.0",
    "chai": "^5.2.0",
    "eslint": "^9.21.0",
    "mocha": "^11.1.0",
    "sinon": "^19.0.2",
    "typescript": "^5.7.3",
    "ts-loader": "^9.5.2",
    "vscode-test": "^1.6.1",
    "webpack": "^5.98.0",
    "webpack-cli": "^6.0.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1"
  }
}
